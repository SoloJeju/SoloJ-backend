package com.dataury.soloJ.domain.ai.service;

import com.dataury.soloJ.domain.plan.dto.CreatePlanAIDto;
import com.dataury.soloJ.domain.plan.dto.CreateSpotDto;
import com.dataury.soloJ.domain.plan.dto.DayPlanDto;
import com.dataury.soloJ.domain.plan.entity.status.TransportType;
import com.dataury.soloJ.domain.touristSpot.service.TourSpotService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@RequiredArgsConstructor
@Slf4j
public class AiPlanService {

    private final ChatGPTService chatGPTService;
    private final TourSpotService tourSpotService;

    public List<DayPlanDto> generate(CreatePlanAIDto requestDto) {
        String prompt = createPrompt(requestDto);
        String gptResponse = chatGPTService.generate(prompt);
        System.out.println("gptResponse: " + gptResponse);
        return parseAiResponse(gptResponse, requestDto.getStartDate().toLocalDate());
    }

    private String createPrompt(CreatePlanAIDto dto) {
        long days = dto.getEndDate().toLocalDate().toEpochDay() - dto.getStartDate().toLocalDate().toEpochDay() + 1;
        List<String> requiredPlaceNames = tourSpotService.findSpotNamesByContentIds(dto.getContentIds());
        String transportKorean = convertTransportTypeToKorean(dto.getTransportType());

        return new StringBuilder()
                .append("ÎÑàÎäî ÏµúÍ≥†Ïùò Ï†úÏ£ºÎèÑ Ïó¨Ìñâ Í∞ÄÏù¥ÎìúÏïº. ÏïÑÎûò Ï°∞Í±¥Ïóê ÎßûÏ∂∞ ")
                .append(days).append("ÏùºÍ∞Ñ ÏûêÎèôÏ∞® Ïó¨Ìñâ Í≥ÑÌöçÏùÑ ÏßúÏ§ò.\n\n")
                .append("Ïó¨Ìñâ Í∏∞Í∞Ñ: ").append(dto.getStartDate().toLocalDate())
                .append(" ~ ").append(dto.getEndDate().toLocalDate()).append("\n")
                .append("Ïù¥Îèô ÏàòÎã®: ").append(transportKorean).append("\n")
                .append("ÌïÑÏàò Ìè¨Ìï® Ïû•ÏÜå: ").append(String.join(", ", requiredPlaceNames)).append("\n\n")
                .append("‚úÖ Ï∂úÎ†• ÌòïÏãù:\n")
                .append("Í∞Å ÎÇ†ÏßúÎ≥ÑÎ°ú ÏãúÍ∞ÑÎåÄÎ≥Ñ Ïû•ÏÜåÎ™ÖÏùÑ Ï†ïÎ¶¨Ìï¥Ï§ò.\n")
                .append("ÏãùÏÇ¨, Ïπ¥Ìéò, Ìú¥Ïãù Ìè¨Ìï®ÌïòÏó¨ Î∞òÎìúÏãú Ï†úÏ£ºÎèÑ ÎÇ¥ **Ïã§Ï°¥ÌïòÎäî Ïû•ÏÜåÎ™Ö**Îßå Ï∂úÎ†•Ìï¥Ï§ò.\n")
                .append("ÏòàÎ•º Îì§Ïñ¥ 'Ï†êÏã¨ ÏãùÏÇ¨' Í∞ôÏùÄ ÏùºÎ∞ò ÌëúÌòÑÏùÄ ‚ùå, 'ÎØ∏ÏòÅÏù¥ÎÑ§ÏãùÎãπ', 'ÏÇ∞Î∞©ÏÇ∞ÌÉÑÏÇ∞Ïò®Ï≤ú', 'Ï†úÏ£ºÏã†ÎùºÌò∏ÌÖî' Í∞ôÏùÄ Ïù¥Î¶ÑÎßå ‚≠ïÔ∏è.\n")
                .append("**Ïû•ÏÜåÎ™ÖÏùÄ Í¥ÑÌò∏ Î∞ñ**Ïóê, **Í¥ÑÌò∏ ÏïàÏóêÎäî Ìï¥Îãπ Ïû•ÏÜåÏóêÏÑú Ìï† ÌôúÎèô ÏÑ§Î™Ö**ÏùÑ Ï†ÅÏñ¥Ï§ò.\n")
                .append("Ïòà) `10:00 ~ 12:00: ÎØ∏ÏòÅÏù¥ÎÑ§ÏãùÎãπ (Í≥†Í∏∞Íµ≠ÏàòÎ°ú Îì†Îì†Ìïú ÏïÑÏπ®)`\n")
                .append("Ï†àÎåÄ 'Ïû•ÏÜå ID - Ïû•ÏÜåÎ™Ö' ÌòïÏãùÏùÄ Ïì∞ÏßÄ Îßà.\n\n")
                .append("‚úÖ ÏòàÏãú:\n")
                .append("1ÏùºÏ∞®\n")
                .append("10:00 ~ 12:00: Ï†úÏ£ºÍ≥µÌï≠ (Î†åÌÑ∞Ïπ¥ Ïù∏Ïàò)\n")
                .append("13:00 ~ 15:00: Í∞ÄÍ≥ÑÌï¥ÏàòÏöïÏû• (ÏÇ∞Ï±Ö Î∞è ÏÇ¨ÏßÑ Ï¥¨ÏòÅ)\n")
                .toString();
    }

    private String convertTransportTypeToKorean(TransportType transportType) {
        return switch (transportType) {
            case CAR -> "ÏûêÎèôÏ∞®";
            case BUS -> "Î≤ÑÏä§";
            case TRAIN -> "Í∏∞Ï∞®";
            case TAXI -> "ÌÉùÏãú";
            case BICYCLE -> "ÏûêÏ†ÑÍ±∞";
            case WALK -> "ÎèÑÎ≥¥";
        };
    }

    public List<DayPlanDto> parseAiResponse(String response, LocalDate startDate) {
        List<DayPlanDto> days = new ArrayList<>();
        String[] lines = response.split("\n");
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");

        int currentDayIndex = -1;
        LocalDate currentDate = startDate;

        for (String line : lines) {
            line = line.trim();
            if (line.isBlank()) continue;

            if (line.matches("^[0-9]+ÏùºÏ∞®(\\s*\\([^)]*\\))?")) {
                currentDayIndex++;
                currentDate = startDate.plusDays(currentDayIndex); // Ïù¥Í±¥ Í∑∏ÎåÄÎ°ú ÎëêÍ≥†
                days.add(new DayPlanDto(currentDayIndex, new ArrayList<>()));
                continue;
            }


            Matcher m = Pattern.compile("(\\d{2}:\\d{2})\\s*~\\s*(\\d{2}:\\d{2}):\\s*(.+?)\\s*\\((.*?)\\)").matcher(line);
            if (m.find()) {
                String startTime = m.group(1);
                String endTime = m.group(2);
                String title = m.group(3).trim();
                String memo = m.group(4).trim();

                if (title.contains("-")) {
                    String[] parts = title.split("-", 2);
                    if (parts.length == 2) {
                        title = parts[1].trim();
                    }
                }

                LocalDateTime arrivalDate = LocalDateTime.of(currentDate, LocalTime.parse(startTime, timeFormatter));
                LocalDateTime duringDate = LocalDateTime.of(currentDate, LocalTime.parse(endTime, timeFormatter));
                Long contentId = tourSpotService.resolveOrRegisterSpotByTitle(title);
                if (contentId != null && contentId == -1L) {
                    contentId = null;
                }
                if (currentDayIndex >= 0 && currentDayIndex < days.size()) {
                    CreateSpotDto spot = new CreateSpotDto(arrivalDate, duringDate, contentId, title, memo);
                    days.get(currentDayIndex).getSpots().add(spot);
                } else {
                    log.warn("üö® ÏûòÎ™ªÎêú currentDayIndex: {}, days.size() = {}", currentDayIndex, days.size());

                }
            }
        }


        return days;
    }
}
